@page "/posts/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Create New Post</h3>
<hr />
<br />

<EditForm Model="@post" OnValidSubmit="CreatePost">
    <DataAnnotationsValidator />
    <ValidationSummary />

    
    <div class="form-group">
        <label>PostText: </label>
        <div>
            <InputText @bind-Value="post.PostText" class="form-control" />
            <ValidationMessage For="@(() => post.PostText)" />
        </div>
    </div>
    <div class="form-group">
        <label>Post Picture: </label>
        <div>
            <InputText @bind-Value="post.PostPicture" class="form-control" placeholder="Only Enter Image URL . . ." />
            <ValidationMessage For="@(() => post.PostPicture)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Post
    </button>
</EditForm>

@code {
    private Post post = new Post();
    private List<Profile>? Profiles;

    protected async override Task OnInitializedAsync()
    {
        // Fetch the list of profiles from the server
        _interceptor.MonitorEvent();
        Profiles = await _client.GetFromJsonAsync<List<Profile>>($"{Endpoints.ProfilesEndpoint}");
    }

    private async Task CreatePost()
    {
        // Send the entire post object to the server
        await _client.PostAsJsonAsync(Endpoints.PostsEndpoint, post);
        _navManager.NavigateTo("/posts/");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
