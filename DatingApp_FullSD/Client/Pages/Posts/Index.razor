@page "/posts/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Posts</h3>
<br />
<a href="/posts/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Post
</a>
<br />
<br />

@if (Posts == null)
{
	<div class="alert alert-info"> Loading Posts...</div>
}
else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Latest Posts</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var post in Posts)
			{
				<tr class="card" style="width: 18rem;">

					<td><img class="card-img top" src="@post.PostPicture" alt="Card image cap"></td>
					<td>@post.PostText</td>

					<td>
						<a href="/posts/view/@post.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/posts/edit/@post.Id" class="btn btn-primary">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(() =>Delete(post.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Post>? Posts;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Posts = await _client.GetFromJsonAsync<List<Post>>($"{Endpoints.PostsEndpoint}");
	}

	async Task Delete(int postId)
	{
		if (Posts != null)
		{
			var post = Posts.First(q => q.Id == postId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {post.UserName}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.PostsEndpoint}/{postId}");
				await OnInitializedAsync();
			}
		}
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}

}
